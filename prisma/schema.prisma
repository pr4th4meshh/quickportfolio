// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   email    String @unique
//   username String
//   password String
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt

//   Portfolio Portfolio[]
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  accounts      Account[]
  sessions      Session[]
  profile       Profile?

  Portfolio Portfolio[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  profession  String?
  headline    String?
  photo       String?
  video       String?
  note        String?
  socialLinks Json?
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Portfolio {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  username   String
  fullName   String
  profession String
  headline   String?
  theme      String    @default("modern")
  features   String[]
  projects   Project[]
  userId     String    @db.ObjectId
  User       User      @relation(fields: [userId], references: [id])
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  link        String?
  timeline    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  portfolioId String    @db.ObjectId
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  profileId  String    @db.ObjectId

  Profile Profile @relation(fields: [profileId], references: [id])
}